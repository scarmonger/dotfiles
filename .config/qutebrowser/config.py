# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# Always restore open sites when qutebrowser is reopened.
# Type: Bool
c.auto_save.session = True

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:71.0) Gecko/20100101 Firefox/71.0', 'https://accounts.google.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:71.0) Gecko/20100101 Firefox/71.0', 'https://docs.google.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Allow websites to register protocol handlers via
# `navigator.registerProtocolHandler`.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.register_protocol_handler', False, 'https://mail.google.com?extsrc=mailto&url=%25s')

# When to show the scrollbar.
# Type: String
# Valid values:
#   - always: Always show the scrollbar.
#   - never: Never show the scrollbar.
#   - when-searching: Show the scrollbar when searching for text in the webpage. With the QtWebKit backend, this is equal to `never`.
c.scrolling.bar = 'always'

# Hide the statusbar unless a message is shown.
# Type: Bool
c.statusbar.hide = False

# Padding (in pixels) for the statusbar.
# Type: Padding
c.statusbar.padding = {'bottom': 1, 'left': 0, 'right': 0, 'top': 1}

# Search engines which can be used via the address bar. Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` signs. The search engine named
# `DEFAULT` is used when `url.auto_search` is turned on and something
# else than a URL was entered to be opened. Other search engines can be
# used by prepending the search engine name to the search term, e.g.
# `:open google qutebrowser`.
# Type: Dict
c.url.searchengines = {'DEFAULT': 'https://duckduckgo.com/?q={}', 'cf': 'https://cfdocs.org/{}', 'sf': 'https://sfsupport.dataon.com/app/ticket/forms/{}', 'aw': 'https://wiki.archlinux.org/?search={}', 'mdb': 'https://mariadb.com/kb/en/+search/?q={}', 'yts': 'https://www.youtube.com/results?search_query={}', 'yu': 'https://yufid.com/result_yufid.html?search={}'}

# Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
c.url.start_pages = 'https://www.startpage.com/'

# Background color of the tab bar.
# Type: QssColor
c.colors.tabs.bar.bg = '#af6324'

# Background color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.bg = 'darkgrey'

# Bindings for normal mode
config.bind(',do', "jseval /*NdjBwpdoKyYbrx4giq02NdjBwpdoKyYbrx4giq02NdjBwpdoKyYbrx4giq02NdjBwpdoKyYbrx4giq02*/javascript:  var x = 'indodevniaga/marctinius/4.Spejize';var xArr = x.split('/');if (document.getElementById('txtAccount')) document.getElementById('txtAccount').value = xArr[0];document.getElementById('txtUserName').value = xArr[1];document.getElementById('txtUserName').onchange = function () {};document.getElementById('txtPassword').value = xArr[2];void(0);")
config.bind(',in', 'jseval javascript: /*PBuPd8Oxc19LMVXGWN6DPBuPd8Oxc19LMVXGWN6DPBuPd8Oxc19LMVXGWN6DPBuPd8Oxc19LMVXGWN6DPBuPd8Oxc19LMVXGWN6DPBuPd8Oxc19LMVXGWN6DPBuPd8Oxc19LMVXGWN6D*/document.getElementById(\'loginUsername-inputEl\').value="marctinius";document.getElementById(\'loginPassword-inputEl\').value="AkuLelakimu"')
config.bind(',mt', "jseval /*NdjBwpdoKyYbrx4giq02NdjBwpdoKyYbrx4giq02NdjBwpdoKyYbrx4giq02NdjBwpdoKyYbrx4giq02*/javascript:  var x = 'bankmantap/bankmantap/B4NkM6nT@p8';var xArr = x.split('/');if (document.getElementById('txtAccount')) document.getElementById('txtAccount').value = xArr[0];document.getElementById('txtUserName').value = xArr[1];document.getElementById('txtUserName').onchange = function () {};document.getElementById('txtPassword').value = xArr[2];void(0);")
config.bind(',so', 'config-source')
config.bind(',wf', 'config-write-py --force')
config.bind('J', 'tab-prev')
config.bind('K', 'tab-next')
config.bind('xs', 'config-cycle statusbar.hide false true')
config.bind('xt', 'config-cycle tabs.show always switching')
config.bind('xx', 'config-cycle statusbar.hide false true; config-cycle tabs.show always switching')
