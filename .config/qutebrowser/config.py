# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via autoconfig.yml
# config.load_autoconfig(False)
config.load_autoconfig()

# Always restore open sites when qutebrowser is reopened. Without this
# option set, `:wq` (`:quit --save`) needs to be used to save open tabs
# (and restore them), while quitting qutebrowser in any other way will
# not save/restore the session. By default, this will save to the
# session which was last loaded. This behavior can be customized via the
# `session.default_name` setting.
# Type: Bool
c.auto_save.session = True

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:90.0) Gecko/20100101 Firefox/90.0', 'https://accounts.google.com/*')

# Padding (in pixels) for the statusbar.
# Type: Padding
c.statusbar.padding = {'bottom': 1, 'left': 0, 'right': 0, 'top': 1}

# Search engines which can be used via the address bar.  Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` braces.  The following further
# placeholds are defined to configure how special characters in the
# search terms are replaced by safe characters (called 'quoting'):  *
# `{}` and `{semiquoted}` quote everything except slashes; this is the
# most   sensible choice for almost all search engines (for the search
# term   `slash/and&amp` this placeholder expands to `slash/and%26amp`).
# * `{quoted}` quotes all characters (for `slash/and&amp` this
# placeholder   expands to `slash%2Fand%26amp`). * `{unquoted}` quotes
# nothing (for `slash/and&amp` this placeholder   expands to
# `slash/and&amp`). * `{0}` means the same as `{}`, but can be used
# multiple times.  The search engine named `DEFAULT` is used when
# `url.auto_search` is turned on and something else than a URL was
# entered to be opened. Other search engines can be used by prepending
# the search engine name to the search term, e.g. `:open google
# qutebrowser`.
# Type: Dict
c.url.searchengines = {'DEFAULT': 'https://duckduckgo.com/?q={}', 'cf': 'https://cfdocs.org/{}', 'sf': 'https://sfsupport.dataon.com/app/ticket/forms/{}', 'aw': 'https://wiki.archlinux.org/?search={}', 'mdb': 'https://mariadb.com/kb/en/+search/?q={}', 'yts': 'https://www.youtube.com/results?search_query={}','yu':'https://yufid.com/result_yufid.html?search={}'}

# Background color of the tab bar.
# Type: QssColor
c.colors.tabs.bar.bg = '#af6324'

# Background color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.bg = 'darkgrey'

# Bindings for normal mode
config.bind(',do', 'jseval javascript:/* FormFiller v0.1.12 */var d=document;function i(a){return d.getElementById(a)}function n(a){return d.getElementsByName(a)[0]}function e(a){t=\'change\';if(window.navigator.userAgent.match(/Trident|MSIEs/g)!=null){x=d.createEvent(\'Events\');x.initEvent(t,1,0);}else{x=new Event(t);}a.dispatchEvent(x);}function v(a,v){a.value=v;e(a)}function c(a){a.checked=true;e(a)}v(i("txtAccount"),"indodevniaga");v(i("txtUserName"),"marctinius");v(i("txtPassword"),"4.Spejize");void(0);')
config.bind(',mt', 'jseval /*NdjBwpdoKyYbrx4giq02NdjBwpdoKyYbrx4giq02NdjBwpdoKyYbrx4giq02NdjBwpdoKyYbrx4giq02*/javascript:  var x = \'bankmantap/bankmantap/B4NkM6nT@p8\';var xArr = x.split(\'/\');if (document.getElementById(\'txtAccount\')) document.getElementById(\'txtAccount\').value = xArr[0];document.getElementById(\'txtUserName\').value = xArr[1];document.getElementById(\'txtUserName\').onchange = function () {};document.getElementById(\'txtPassword\').value = xArr[2];void(0);')
# config.bind('xs', 'config-cycle statusbar.show in-mode always')
config.bind('xs', 'config-cycle statusbar.hide false true')
config.bind('xt', 'config-cycle tabs.show always switching')
# config.bind('xx', 'config-cycle statusbar.show in-mode always;; config-cycle tabs.show always switching')
config.bind('xx', 'config-cycle statusbar.hide false true; config-cycle tabs.show always switching')

config.bind('K', 'tab-next')
config.bind('J', 'tab-prev')
config.bind(',so', 'config-source')

